// <auto-generated />
using System;
using IdentityService.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IdentityService.Persistence.Migrations
{
    [DbContext(typeof(BaseDbContext))]
    partial class BaseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Core.Security.Entities.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ProductOwnerRole"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CatalogOwnerRole"
                        });
                });

            modelBuilder.Entity("Core.Security.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReasonRevoked")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Core.Security.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuthenticatorType")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthenticatorType = 0,
                            Email = "test@gmail.com",
                            FirstName = "test-admint",
                            LastName = "testLast",
                            PasswordHash = new byte[] { 109, 69, 10, 143, 32, 154, 232, 142, 105, 66, 112, 86, 110, 79, 250, 240, 169, 41, 76, 64, 228, 172, 226, 135, 140, 44, 133, 231, 0, 215, 174, 144, 213, 173, 161, 8, 141, 111, 127, 168, 242, 148, 148, 129, 234, 199, 128, 99, 7, 231, 166, 38, 128, 147, 33, 65, 118, 73, 178, 131, 145, 211, 86, 31 },
                            PasswordSalt = new byte[] { 220, 179, 206, 133, 62, 16, 47, 223, 145, 174, 106, 226, 179, 17, 45, 22, 188, 217, 50, 198, 23, 16, 13, 101, 161, 151, 40, 251, 47, 99, 141, 7, 139, 245, 197, 179, 142, 82, 36, 254, 162, 57, 161, 117, 62, 191, 235, 64, 158, 235, 66, 29, 135, 94, 92, 116, 234, 243, 84, 162, 212, 143, 52, 174, 250, 134, 20, 192, 195, 116, 78, 112, 139, 120, 70, 26, 72, 195, 249, 209, 89, 66, 104, 78, 159, 213, 37, 247, 76, 214, 46, 1, 66, 104, 28, 35, 186, 75, 17, 219, 95, 216, 169, 172, 104, 213, 224, 187, 64, 152, 162, 156, 46, 182, 125, 189, 84, 178, 6, 55, 15, 144, 87, 187, 209, 173, 221, 128 },
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            AuthenticatorType = 0,
                            Email = "test-catalog@gmail.com",
                            FirstName = "testCatalowOwner",
                            LastName = "testCatalowOwnerlast",
                            PasswordHash = new byte[] { 253, 98, 212, 248, 199, 254, 217, 156, 205, 131, 150, 96, 15, 17, 5, 187, 117, 24, 72, 109, 123, 50, 139, 119, 155, 196, 115, 210, 72, 10, 5, 114, 179, 208, 98, 224, 215, 6, 250, 91, 24, 40, 124, 113, 5, 201, 27, 133, 116, 52, 154, 206, 148, 210, 10, 152, 56, 90, 102, 140, 193, 160, 24, 243 },
                            PasswordSalt = new byte[] { 194, 166, 238, 167, 4, 121, 206, 216, 142, 120, 144, 76, 66, 63, 100, 16, 170, 47, 254, 115, 24, 208, 191, 234, 184, 174, 37, 112, 16, 176, 214, 150, 153, 92, 173, 115, 80, 53, 191, 0, 27, 142, 135, 177, 253, 91, 215, 212, 174, 230, 149, 229, 179, 24, 16, 144, 236, 28, 186, 195, 32, 86, 58, 170, 77, 35, 61, 120, 164, 226, 211, 165, 236, 240, 165, 19, 213, 198, 193, 71, 124, 202, 9, 214, 201, 60, 234, 223, 245, 59, 104, 66, 248, 147, 69, 164, 154, 155, 56, 159, 114, 205, 35, 44, 169, 235, 20, 177, 194, 58, 73, 37, 7, 7, 185, 39, 60, 201, 63, 254, 170, 45, 14, 36, 196, 125, 161, 23 },
                            Status = true
                        },
                        new
                        {
                            Id = 3,
                            AuthenticatorType = 0,
                            Email = "test-product@gmail.com",
                            FirstName = "testProductOwner",
                            LastName = "testProductOwnerLast",
                            PasswordHash = new byte[] { 70, 186, 97, 140, 255, 25, 109, 214, 182, 191, 198, 171, 14, 145, 163, 10, 46, 204, 69, 51, 152, 120, 69, 97, 81, 212, 65, 210, 248, 123, 36, 232, 232, 221, 250, 243, 249, 222, 155, 213, 78, 147, 107, 217, 208, 51, 37, 195, 140, 14, 17, 51, 198, 138, 62, 191, 191, 122, 130, 32, 70, 202, 3, 154 },
                            PasswordSalt = new byte[] { 213, 19, 192, 62, 113, 94, 18, 77, 121, 28, 63, 63, 245, 102, 203, 76, 252, 17, 158, 131, 123, 191, 175, 172, 27, 128, 190, 234, 167, 37, 30, 229, 146, 225, 14, 164, 198, 15, 246, 250, 61, 87, 253, 37, 173, 121, 174, 118, 24, 119, 112, 213, 237, 150, 133, 55, 27, 201, 38, 77, 153, 159, 231, 60, 122, 191, 11, 95, 138, 132, 164, 112, 251, 86, 231, 52, 33, 118, 249, 203, 85, 109, 99, 215, 226, 115, 219, 87, 32, 33, 139, 226, 130, 212, 74, 81, 243, 158, 34, 207, 245, 16, 25, 40, 212, 121, 201, 157, 150, 130, 232, 106, 208, 43, 13, 182, 177, 81, 234, 100, 97, 210, 145, 26, 42, 196, 227, 1 },
                            Status = true
                        });
                });

            modelBuilder.Entity("Core.Security.Entities.UserOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OperationClaimId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            OperationClaimId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            OperationClaimId = 3,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Core.Security.Entities.RefreshToken", b =>
                {
                    b.HasOne("Core.Security.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Security.Entities.UserOperationClaim", b =>
                {
                    b.HasOne("Core.Security.Entities.OperationClaim", "OperationClaim")
                        .WithMany()
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Security.Entities.User", "User")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Security.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("UserOperationClaims");
                });
#pragma warning restore 612, 618
        }
    }
}
